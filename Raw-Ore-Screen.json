{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- Hide programming board from UI\nunit.hide()\n-- Unload default Modules & Libraries from global.lua\nfunction unrequire(m)\n    package.loaded[m] = nil\n    _G[m] = nil\nend\nunrequire'json'\nunrequire'Navigator'\nunrequire'Helpers'\nunrequire'AxisCommand'\nunrequire'database'\nunrequire'cpml/sgui'\nunrequire'pl/init'\n-- Manually run the garbage collector \ncollectgarbage('collect')\n-- \"setpause\" controls how much memory has to be allocated before it starts a new cycle\n-- Default is 200, meaning it will run everytime the memory is doubled,\n-- 100 means it will run every allocation. we're gonna use 110\ncollectgarbage('setpause', 110)\n-- You want this above to run on every pb, before any timers.\n-- You can manually collect garbage withing your tick, bot not recommended, fix your code!\n\n-- Here we are gonna detect what is in the default slots, databank/core/screen.\ncore, screen = {};\nlocal slots = {slot1,slot2}\n\nfor i = 1, #slots do\n    if slots[i].getElementClass() == 'CoreUnitStatic'\n    or slots[i].getElementClass() == 'CoreUnitSpace'\n    or slots[i].getElementClass() == 'CoreUnitDynamic' then\n        core = slots[i]\n    end\n    if slots[i].getElementClass() == 'ScreenUnit' then\n        screen = slots[i]\n    end\nend\nlocal refresh = 10 --export\n-- Set timer to update screen every refresh\nunit.setTimer('blam', refresh)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"local ores, htmlHead, htmlFoot, htmlBody, eleIds, containers = {\n    {\n        {'Quartz',2.65,'rgba(0,255,255'},\n        {'Bauxite',1.28095,'rgba(191,166,166'},\n        {'Coal',1.346,'rgba(54,69,79'},\n        {'Hematite',5.04,'rgba(255,255,0'}\n    },\n    {\n        {'Malachite',4.0,'rgba(200,128,51'},\n        {'Limestone',2.7108,'rgba(61,255,0'},\n        {'Natron',1.55,'rgba(171,92,242'},\n        {'Chromite',4.54,'rgba(138,153,199'}\n    },\n    {\n        {'Acanthite',7.2,'rgba(192,192,192'},\n        {'Garnierite',2.6,'rgba(80,208,80'},\n        {'Pyrite',5.01,'rgba(255,255,48'},\n        {'Petalite',2.41,'rgba(204,128,255'}\n    },\n    {\n        {'Cobaltite',6.33,'rgba(240,144,160'},\n        {'Cryolite',2.95,'rgba(144,224,80'},\n        {'Kolbeckite',2.37,'rgba(230,230,230'},\n        {'Gold Nuggets',19.3,'rgba(255,209,35'}\n    },\n    {\n        {'Columbite',5.38,'rgba(155,194,201'},\n        {'Illmenite',4.55,'rgba(191,194,199'},\n        {'Vanadinite',6.95,'rgba(166,166,171'},\n        {'Rhodonite',3.76,'rgba(156,122,199'},\n        {'Thoramine',21.30,'rgba(255,0,0'}\n    }\n}, [[<html><head><style>\n    .head {\n        margin-top: -6px;\n        font-size:50px;\n        font-variant: small-caps;\n        font-weight:bold\n    }\n    th, .head {\n        background: -webkit-linear-gradient(white, #38495a);\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -webkit-text-stroke-width: 2px;\n        -webkit-text-stroke-color: #fff\n    }\n    body {\n        text-align:center\n    }\n    table {\n        float:left;\n        font-size:20px;\n        width: calc(50% - 10px);\n        margin:0 5px 10px 5px\n    }\n    th {\n        font-size:28px\n    }\n    td, .bar {\n        text-shadow: 1px 1px #000, 2px 2px #000;\n        background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.05));\n        box-shadow: 0 0 1px 1px rgba(0, 0, 0, 0.25), inset 0 1px rgba(255, 255, 255, 0.1);\n        color:#fff\n    }\n    .amount {\n        width:20%\n    }\n    .name {\n        width:36%\n    }\n    .percent {\n        width:45%;\n        font-family:bank;\n        letter-spacing:-1px\n    }\n    .blank td {\n        padding:2px\n    }\n</style></head><body>\n\t<div class=\"head\">Raw Ores</div>]], '</body></html>', '', core.getElementIdList(), {}\n-- Simple rounding function needed later.\nfunction round(number, decimals)\n    local power = 10^decimals\n    return math.floor(number * power) / power\nend\n-- Grab and store all the containers into a table.\nfor i = 1, #eleIds do\n    if core.getElementTypeById(eleIds[i]) == 'container'\n    or core.getElementTypeById(eleIds[i]) == 'Hub Container' then\n        local name = core.getElementNameById(eleIds[i])\n        -- If not default container name, store.\n        if not string.match(name, '%[') then\n            -- Container name eg: Coal, Bauxite\n            -- Name of containers, Size of container and Total Weight of container.\n            table.insert(containers, {name, core.getElementMaxHitPointsById(eleIds[i]), core.getElementMassById(eleIds[i])})\n        end\n    end\nend\n-- Iterate through the list of ores so they display in order.\nfor i = 1, #ores do\n    local style = ''\n    if i == 5 then\n        style = 'style=\"float:none;margin:0 auto\"'\n    end\n    htmlBody = htmlBody .. '<table '.. style ..'><tbody><tr><th colspan=3>TIER '..i..'</th></tr>'\n    local tiers = ores[i]\n    for x = 1, #tiers do\n        local name = tiers[x][1]\n        for y = 1, #containers do\n            if containers[y][1] == name then\n                local containerProficiency = 30 --export\n                local hubVol = 1280000 --export\n                local sizes = {\n                    -- Mining and Inventory, Inventory Manager, Container Proficiency.\n                    -- Containers, min - max Hitpoints, Base Volume, Base Weight\n                    {49.00,122.00,hubVol,55.80}, --Hub\n                    {123.00,998.00,1000,229.09}, --xs\n                    {998.00,7996.00,8000,1280}, --s\n                    {7996.00,17316.00,64000,7421.34}, --m\n                    {17316.00,50316.00,128000,14842.7} --l\n                }\n                for z = 1, #sizes do\n                    if (containers[y][2] >= sizes[z][1] and containers[y][2] <= sizes[z][2]) then\n                        local amount = (containers[y][3] - sizes[z][4]) / tiers[x][2]\n                        local volume = sizes[z][3] + (sizes[z][3] * containerProficiency / 100)\n                        -- we need to times the base volume by the proficiency modifier.\n                        local percent = amount / volume\n                        -- Convert L to KL to ML\n                        if amount > 999999 then\n                            amount = round(amount / 1000000, 2) .. 'ML'\n                        elseif amount > 999 then\n                            amount = round(amount / 1000, 2) .. 'KL'\n                        else\n                            amount = round(amount, 2) .. 'L'\n                        end\n                        local r,g,b = '255'\n                        if percent < 0.5 then\n                            -- I like red to blue....Empty -> half full.\n                            -- range,              lower                upper..\n                            r = math.floor(255 *(1 - (percent) / 0.5) +0 * (percent) / 0.5)\n                            g = math.floor(0 *(1 - (percent) / 0.5) +0 * (percent) / 0.5)\n                            b = math.floor(0 *(1 - (percent) / 0.5) +255 * (percent) / 0.5)\n                        else\n                            -- then, blue to green, half fulle -> full.\n                            -- Alter range\n                            r = math.floor(0 *(1 - (percent - 0.5) / 0.5) +0 * (percent - 0.5) / 0.5)\n                            g = math.floor(0 *(1 - (percent - 0.5) / 0.5) +255 * (percent - 0.5) / 0.5)\n                            b = math.floor(255 *(1 - (percent - 0.5) / 0.5) +0 * (percent - 0.5) / 0.5)\n                        end\n                        percent = round(percent * 100, 1)\n                        local color = tiers[x][3]\n                        htmlBody = htmlBody .. [[<tr>\n                        <td class=\"name\" style=\"border: 1px solid ]]..color..',1); background-color:'..color..', 0.6)\">'..name..[[</td>\n                        <td class=\"amount\" style=\"border: 1px solid ]]..color..',1); background-color:'..color..', 0.6)\">'..amount..[[</td>\n                        <td class=\"percent\" style=\"border: 1px solid ]]..color..[[,1);\">\n                        <div class=\"bar\" style=\"width: ]]..percent..'%; background-color: '.. 'rgba('..r..','..g..','..b..',0.7)' ..'\">'..percent..[[%</div>\n                        </td>\n                        </tr>\n                        <tr class=\"blank\"><td></td></tr>]]\n                    end\n                end\n            end\n        end\n    end\n    htmlBody = htmlBody .. '</tbody></table>'\nend\nscreen.setHTML(htmlHead .. htmlBody .. htmlFoot)","filter":{"args":[{"value":"blam"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]}
